# ising.py


# ----------------------------------------------------------------------------------------------------------
# LIBRARIES
# ----------------------------------------------------------------------------------------------------------


import numpy as np
import jax
import jax.numpy as jnp


# ----------------------------------------------------------------------------------------------------------
# ISING METHODS
# ----------------------------------------------------------------------------------------------------------


def hamiltonian(sigma, h, J, beta):

    interaction_term = jnp.dot(sigma, J @ sigma)
    field_term = jnp.dot(h, sigma)
    energy = - field_term - 0.5 * interaction_term
    
    return beta * energy


# ----------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------


def flip_spin(sigma, i):
    
    return sigma.at[i].set(-sigma[i])


# ----------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------


def single_flip_energy_diff(sigma, i, h, J, beta):

    sigma_flip = flip_spin(sigma, i)
    delta = hamiltonian(sigma_flip, h, J, beta) - hamiltonian(sigma, h, J, beta)
    
    return delta


# ----------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------


def flips_energy_diff(sigma, h, J, beta):
    
    d = sigma.shape[0]
    diffs = []

    for i in range(d):
        delta_e = single_flip_energy_diff(sigma, i, h, J, beta)
        diffs.append(delta_e)

    return jnp.array(diffs)


# ----------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------


def conditional_prob(sigma, i, h, J, beta):

    local_field = h[i] + jnp.dot(J[i], sigma) - J[i, i] * sigma[i]
    exponent = -2 * beta * sigma[i] * local_field

    return 1.0 / (1.0 + jnp.exp(exponent))


# ----------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------


def log_conditional_prob(sigma, i, h, J, beta=1.0):

    return jnp.log(conditional_prob(sigma, i, h, J, beta) + 1e-12)


# ----------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------


def compute_logp_given_mu(mu, samples, i, h, J, beta=1.0):

    sigma = samples[mu]
    
    return log_conditional_prob(sigma, i, h, J, beta)


# ----------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------


def compute_logp_all_mu(mus, samples, i, h, J, beta=1.0):
    
    return jax.vmap(compute_logp_given_mu, in_axes=(0, None, None, None, None, None))(mus, samples, i, h, J, beta)


# ----------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------









# ----------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------








# ----------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------







